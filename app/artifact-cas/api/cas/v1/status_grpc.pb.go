// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: cas/v1/status.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatusServiceClient is the client API for StatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatusServiceClient interface {
	Infoz(ctx context.Context, in *InfozRequest, opts ...grpc.CallOption) (*InfozResponse, error)
	Statusz(ctx context.Context, in *StatuszRequest, opts ...grpc.CallOption) (*StatuszResponse, error)
}

type statusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatusServiceClient(cc grpc.ClientConnInterface) StatusServiceClient {
	return &statusServiceClient{cc}
}

func (c *statusServiceClient) Infoz(ctx context.Context, in *InfozRequest, opts ...grpc.CallOption) (*InfozResponse, error) {
	out := new(InfozResponse)
	err := c.cc.Invoke(ctx, "/cas.v1.StatusService/Infoz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusServiceClient) Statusz(ctx context.Context, in *StatuszRequest, opts ...grpc.CallOption) (*StatuszResponse, error) {
	out := new(StatuszResponse)
	err := c.cc.Invoke(ctx, "/cas.v1.StatusService/Statusz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatusServiceServer is the server API for StatusService service.
// All implementations must embed UnimplementedStatusServiceServer
// for forward compatibility
type StatusServiceServer interface {
	Infoz(context.Context, *InfozRequest) (*InfozResponse, error)
	Statusz(context.Context, *StatuszRequest) (*StatuszResponse, error)
	mustEmbedUnimplementedStatusServiceServer()
}

// UnimplementedStatusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStatusServiceServer struct {
}

func (UnimplementedStatusServiceServer) Infoz(context.Context, *InfozRequest) (*InfozResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Infoz not implemented")
}
func (UnimplementedStatusServiceServer) Statusz(context.Context, *StatuszRequest) (*StatuszResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Statusz not implemented")
}
func (UnimplementedStatusServiceServer) mustEmbedUnimplementedStatusServiceServer() {}

// UnsafeStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatusServiceServer will
// result in compilation errors.
type UnsafeStatusServiceServer interface {
	mustEmbedUnimplementedStatusServiceServer()
}

func RegisterStatusServiceServer(s grpc.ServiceRegistrar, srv StatusServiceServer) {
	s.RegisterService(&StatusService_ServiceDesc, srv)
}

func _StatusService_Infoz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfozRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).Infoz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cas.v1.StatusService/Infoz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).Infoz(ctx, req.(*InfozRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusService_Statusz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatuszRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).Statusz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cas.v1.StatusService/Statusz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).Statusz(ctx, req.(*StatuszRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatusService_ServiceDesc is the grpc.ServiceDesc for StatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cas.v1.StatusService",
	HandlerType: (*StatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Infoz",
			Handler:    _StatusService_Infoz_Handler,
		},
		{
			MethodName: "Statusz",
			Handler:    _StatusService_Statusz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cas/v1/status.proto",
}
