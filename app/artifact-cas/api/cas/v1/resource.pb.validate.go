// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cas/v1/resource.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ResourceServiceDescribeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceServiceDescribeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceServiceDescribeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ResourceServiceDescribeRequestMultiError, or nil if none found.
func (m *ResourceServiceDescribeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceServiceDescribeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Digest

	if len(errors) > 0 {
		return ResourceServiceDescribeRequestMultiError(errors)
	}

	return nil
}

// ResourceServiceDescribeRequestMultiError is an error wrapping multiple
// validation errors returned by ResourceServiceDescribeRequest.ValidateAll()
// if the designated constraints aren't met.
type ResourceServiceDescribeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceServiceDescribeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceServiceDescribeRequestMultiError) AllErrors() []error { return m }

// ResourceServiceDescribeRequestValidationError is the validation error
// returned by ResourceServiceDescribeRequest.Validate if the designated
// constraints aren't met.
type ResourceServiceDescribeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceServiceDescribeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceServiceDescribeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceServiceDescribeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceServiceDescribeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceServiceDescribeRequestValidationError) ErrorName() string {
	return "ResourceServiceDescribeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceServiceDescribeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceServiceDescribeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceServiceDescribeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceServiceDescribeRequestValidationError{}

// Validate checks the field values on ResourceServiceDescribeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceServiceDescribeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceServiceDescribeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ResourceServiceDescribeResponseMultiError, or nil if none found.
func (m *ResourceServiceDescribeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceServiceDescribeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceServiceDescribeResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceServiceDescribeResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceServiceDescribeResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResourceServiceDescribeResponseMultiError(errors)
	}

	return nil
}

// ResourceServiceDescribeResponseMultiError is an error wrapping multiple
// validation errors returned by ResourceServiceDescribeResponse.ValidateAll()
// if the designated constraints aren't met.
type ResourceServiceDescribeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceServiceDescribeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceServiceDescribeResponseMultiError) AllErrors() []error { return m }

// ResourceServiceDescribeResponseValidationError is the validation error
// returned by ResourceServiceDescribeResponse.Validate if the designated
// constraints aren't met.
type ResourceServiceDescribeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceServiceDescribeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceServiceDescribeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceServiceDescribeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceServiceDescribeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceServiceDescribeResponseValidationError) ErrorName() string {
	return "ResourceServiceDescribeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceServiceDescribeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceServiceDescribeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceServiceDescribeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceServiceDescribeResponseValidationError{}

// Validate checks the field values on CASResource with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CASResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CASResource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CASResourceMultiError, or
// nil if none found.
func (m *CASResource) ValidateAll() error {
	return m.validate(true)
}

func (m *CASResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileName

	// no validation rules for Digest

	if len(errors) > 0 {
		return CASResourceMultiError(errors)
	}

	return nil
}

// CASResourceMultiError is an error wrapping multiple validation errors
// returned by CASResource.ValidateAll() if the designated constraints aren't met.
type CASResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CASResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CASResourceMultiError) AllErrors() []error { return m }

// CASResourceValidationError is the validation error returned by
// CASResource.Validate if the designated constraints aren't met.
type CASResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CASResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CASResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CASResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CASResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CASResourceValidationError) ErrorName() string { return "CASResourceValidationError" }

// Error satisfies the builtin error interface
func (e CASResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCASResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CASResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CASResourceValidationError{}
