// Code generated by ent, DO NOT EDIT.

package organization

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the organization type in the database.
	Label = "organization"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeMemberships holds the string denoting the memberships edge name in mutations.
	EdgeMemberships = "memberships"
	// EdgeWorkflowContracts holds the string denoting the workflow_contracts edge name in mutations.
	EdgeWorkflowContracts = "workflow_contracts"
	// EdgeWorkflows holds the string denoting the workflows edge name in mutations.
	EdgeWorkflows = "workflows"
	// EdgeOciRepositories holds the string denoting the oci_repositories edge name in mutations.
	EdgeOciRepositories = "oci_repositories"
	// EdgeIntegrations holds the string denoting the integrations edge name in mutations.
	EdgeIntegrations = "integrations"
	// Table holds the table name of the organization in the database.
	Table = "organizations"
	// MembershipsTable is the table that holds the memberships relation/edge.
	MembershipsTable = "memberships"
	// MembershipsInverseTable is the table name for the Membership entity.
	// It exists in this package in order to avoid circular dependency with the "membership" package.
	MembershipsInverseTable = "memberships"
	// MembershipsColumn is the table column denoting the memberships relation/edge.
	MembershipsColumn = "organization_memberships"
	// WorkflowContractsTable is the table that holds the workflow_contracts relation/edge.
	WorkflowContractsTable = "workflow_contracts"
	// WorkflowContractsInverseTable is the table name for the WorkflowContract entity.
	// It exists in this package in order to avoid circular dependency with the "workflowcontract" package.
	WorkflowContractsInverseTable = "workflow_contracts"
	// WorkflowContractsColumn is the table column denoting the workflow_contracts relation/edge.
	WorkflowContractsColumn = "organization_workflow_contracts"
	// WorkflowsTable is the table that holds the workflows relation/edge.
	WorkflowsTable = "workflows"
	// WorkflowsInverseTable is the table name for the Workflow entity.
	// It exists in this package in order to avoid circular dependency with the "workflow" package.
	WorkflowsInverseTable = "workflows"
	// WorkflowsColumn is the table column denoting the workflows relation/edge.
	WorkflowsColumn = "organization_id"
	// OciRepositoriesTable is the table that holds the oci_repositories relation/edge.
	OciRepositoriesTable = "oci_repositories"
	// OciRepositoriesInverseTable is the table name for the OCIRepository entity.
	// It exists in this package in order to avoid circular dependency with the "ocirepository" package.
	OciRepositoriesInverseTable = "oci_repositories"
	// OciRepositoriesColumn is the table column denoting the oci_repositories relation/edge.
	OciRepositoriesColumn = "organization_oci_repositories"
	// IntegrationsTable is the table that holds the integrations relation/edge.
	IntegrationsTable = "integrations"
	// IntegrationsInverseTable is the table name for the Integration entity.
	// It exists in this package in order to avoid circular dependency with the "integration" package.
	IntegrationsInverseTable = "integrations"
	// IntegrationsColumn is the table column denoting the integrations relation/edge.
	IntegrationsColumn = "organization_integrations"
)

// Columns holds all SQL columns for organization fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
