// Code generated by ent, DO NOT EDIT.

package workflow

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the workflow type in the database.
	Label = "workflow"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldProject holds the string denoting the project field in the database.
	FieldProject = "project"
	// FieldTeam holds the string denoting the team field in the database.
	FieldTeam = "team"
	// FieldRunsCount holds the string denoting the runs_count field in the database.
	FieldRunsCount = "runs_count"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeRobotaccounts holds the string denoting the robotaccounts edge name in mutations.
	EdgeRobotaccounts = "robotaccounts"
	// EdgeWorkflowruns holds the string denoting the workflowruns edge name in mutations.
	EdgeWorkflowruns = "workflowruns"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// EdgeContract holds the string denoting the contract edge name in mutations.
	EdgeContract = "contract"
	// EdgeIntegrationAttachments holds the string denoting the integration_attachments edge name in mutations.
	EdgeIntegrationAttachments = "integration_attachments"
	// Table holds the table name of the workflow in the database.
	Table = "workflows"
	// RobotaccountsTable is the table that holds the robotaccounts relation/edge.
	RobotaccountsTable = "robot_accounts"
	// RobotaccountsInverseTable is the table name for the RobotAccount entity.
	// It exists in this package in order to avoid circular dependency with the "robotaccount" package.
	RobotaccountsInverseTable = "robot_accounts"
	// RobotaccountsColumn is the table column denoting the robotaccounts relation/edge.
	RobotaccountsColumn = "workflow_robotaccounts"
	// WorkflowrunsTable is the table that holds the workflowruns relation/edge.
	WorkflowrunsTable = "workflow_runs"
	// WorkflowrunsInverseTable is the table name for the WorkflowRun entity.
	// It exists in this package in order to avoid circular dependency with the "workflowrun" package.
	WorkflowrunsInverseTable = "workflow_runs"
	// WorkflowrunsColumn is the table column denoting the workflowruns relation/edge.
	WorkflowrunsColumn = "workflow_workflowruns"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "workflows"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "organization_id"
	// ContractTable is the table that holds the contract relation/edge.
	ContractTable = "workflows"
	// ContractInverseTable is the table name for the WorkflowContract entity.
	// It exists in this package in order to avoid circular dependency with the "workflowcontract" package.
	ContractInverseTable = "workflow_contracts"
	// ContractColumn is the table column denoting the contract relation/edge.
	ContractColumn = "workflow_contract"
	// IntegrationAttachmentsTable is the table that holds the integration_attachments relation/edge.
	IntegrationAttachmentsTable = "integration_attachments"
	// IntegrationAttachmentsInverseTable is the table name for the IntegrationAttachment entity.
	// It exists in this package in order to avoid circular dependency with the "integrationattachment" package.
	IntegrationAttachmentsInverseTable = "integration_attachments"
	// IntegrationAttachmentsColumn is the table column denoting the integration_attachments relation/edge.
	IntegrationAttachmentsColumn = "integration_attachment_workflow"
)

// Columns holds all SQL columns for workflow fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldProject,
	FieldTeam,
	FieldRunsCount,
	FieldCreatedAt,
	FieldDeletedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "workflows"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"organization_id",
	"workflow_contract",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultRunsCount holds the default value on creation for the "runs_count" field.
	DefaultRunsCount int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
