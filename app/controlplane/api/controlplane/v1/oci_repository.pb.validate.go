// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: controlplane/v1/oci_repository.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OCIRepositoryServiceSaveRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OCIRepositoryServiceSaveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OCIRepositoryServiceSaveRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// OCIRepositoryServiceSaveRequestMultiError, or nil if none found.
func (m *OCIRepositoryServiceSaveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OCIRepositoryServiceSaveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRepository()) < 1 {
		err := OCIRepositoryServiceSaveRequestValidationError{
			field:  "Repository",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	oneofCredentialsPresent := false
	switch v := m.Credentials.(type) {
	case *OCIRepositoryServiceSaveRequest_KeyPair:
		if v == nil {
			err := OCIRepositoryServiceSaveRequestValidationError{
				field:  "Credentials",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofCredentialsPresent = true

		if all {
			switch v := interface{}(m.GetKeyPair()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OCIRepositoryServiceSaveRequestValidationError{
						field:  "KeyPair",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OCIRepositoryServiceSaveRequestValidationError{
						field:  "KeyPair",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetKeyPair()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OCIRepositoryServiceSaveRequestValidationError{
					field:  "KeyPair",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofCredentialsPresent {
		err := OCIRepositoryServiceSaveRequestValidationError{
			field:  "Credentials",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OCIRepositoryServiceSaveRequestMultiError(errors)
	}

	return nil
}

// OCIRepositoryServiceSaveRequestMultiError is an error wrapping multiple
// validation errors returned by OCIRepositoryServiceSaveRequest.ValidateAll()
// if the designated constraints aren't met.
type OCIRepositoryServiceSaveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OCIRepositoryServiceSaveRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OCIRepositoryServiceSaveRequestMultiError) AllErrors() []error { return m }

// OCIRepositoryServiceSaveRequestValidationError is the validation error
// returned by OCIRepositoryServiceSaveRequest.Validate if the designated
// constraints aren't met.
type OCIRepositoryServiceSaveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OCIRepositoryServiceSaveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OCIRepositoryServiceSaveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OCIRepositoryServiceSaveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OCIRepositoryServiceSaveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OCIRepositoryServiceSaveRequestValidationError) ErrorName() string {
	return "OCIRepositoryServiceSaveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OCIRepositoryServiceSaveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOCIRepositoryServiceSaveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OCIRepositoryServiceSaveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OCIRepositoryServiceSaveRequestValidationError{}

// Validate checks the field values on OCIRepositoryServiceSaveResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *OCIRepositoryServiceSaveResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OCIRepositoryServiceSaveResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// OCIRepositoryServiceSaveResponseMultiError, or nil if none found.
func (m *OCIRepositoryServiceSaveResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OCIRepositoryServiceSaveResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OCIRepositoryServiceSaveResponseMultiError(errors)
	}

	return nil
}

// OCIRepositoryServiceSaveResponseMultiError is an error wrapping multiple
// validation errors returned by
// OCIRepositoryServiceSaveResponse.ValidateAll() if the designated
// constraints aren't met.
type OCIRepositoryServiceSaveResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OCIRepositoryServiceSaveResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OCIRepositoryServiceSaveResponseMultiError) AllErrors() []error { return m }

// OCIRepositoryServiceSaveResponseValidationError is the validation error
// returned by OCIRepositoryServiceSaveResponse.Validate if the designated
// constraints aren't met.
type OCIRepositoryServiceSaveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OCIRepositoryServiceSaveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OCIRepositoryServiceSaveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OCIRepositoryServiceSaveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OCIRepositoryServiceSaveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OCIRepositoryServiceSaveResponseValidationError) ErrorName() string {
	return "OCIRepositoryServiceSaveResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OCIRepositoryServiceSaveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOCIRepositoryServiceSaveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OCIRepositoryServiceSaveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OCIRepositoryServiceSaveResponseValidationError{}

// Validate checks the field values on OCIRepositoryServiceSaveRequest_Keypair
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *OCIRepositoryServiceSaveRequest_Keypair) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// OCIRepositoryServiceSaveRequest_Keypair with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// OCIRepositoryServiceSaveRequest_KeypairMultiError, or nil if none found.
func (m *OCIRepositoryServiceSaveRequest_Keypair) ValidateAll() error {
	return m.validate(true)
}

func (m *OCIRepositoryServiceSaveRequest_Keypair) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := OCIRepositoryServiceSaveRequest_KeypairValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := OCIRepositoryServiceSaveRequest_KeypairValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OCIRepositoryServiceSaveRequest_KeypairMultiError(errors)
	}

	return nil
}

// OCIRepositoryServiceSaveRequest_KeypairMultiError is an error wrapping
// multiple validation errors returned by
// OCIRepositoryServiceSaveRequest_Keypair.ValidateAll() if the designated
// constraints aren't met.
type OCIRepositoryServiceSaveRequest_KeypairMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OCIRepositoryServiceSaveRequest_KeypairMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OCIRepositoryServiceSaveRequest_KeypairMultiError) AllErrors() []error { return m }

// OCIRepositoryServiceSaveRequest_KeypairValidationError is the validation
// error returned by OCIRepositoryServiceSaveRequest_Keypair.Validate if the
// designated constraints aren't met.
type OCIRepositoryServiceSaveRequest_KeypairValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OCIRepositoryServiceSaveRequest_KeypairValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OCIRepositoryServiceSaveRequest_KeypairValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OCIRepositoryServiceSaveRequest_KeypairValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OCIRepositoryServiceSaveRequest_KeypairValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OCIRepositoryServiceSaveRequest_KeypairValidationError) ErrorName() string {
	return "OCIRepositoryServiceSaveRequest_KeypairValidationError"
}

// Error satisfies the builtin error interface
func (e OCIRepositoryServiceSaveRequest_KeypairValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOCIRepositoryServiceSaveRequest_Keypair.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OCIRepositoryServiceSaveRequest_KeypairValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OCIRepositoryServiceSaveRequest_KeypairValidationError{}
