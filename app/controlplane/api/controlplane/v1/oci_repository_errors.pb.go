// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// TODO: add support for PRECONDITION_FAILED
func IsOciRepositoryErrorReasonUnspecified(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == OCIRepositoryErrorReason_OCI_REPOSITORY_ERROR_REASON_UNSPECIFIED.String() && e.Code == 500
}

// TODO: add support for PRECONDITION_FAILED
func ErrorOciRepositoryErrorReasonUnspecified(format string, args ...interface{}) *errors.Error {
	return errors.New(500, OCIRepositoryErrorReason_OCI_REPOSITORY_ERROR_REASON_UNSPECIFIED.String(), fmt.Sprintf(format, args...))
}

func IsOciRepositoryErrorReasonRequired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == OCIRepositoryErrorReason_OCI_REPOSITORY_ERROR_REASON_REQUIRED.String() && e.Code == 403
}

func ErrorOciRepositoryErrorReasonRequired(format string, args ...interface{}) *errors.Error {
	return errors.New(403, OCIRepositoryErrorReason_OCI_REPOSITORY_ERROR_REASON_REQUIRED.String(), fmt.Sprintf(format, args...))
}

// The repository does not seem to be operational
// a previous validation has failed
func IsOciRepositoryErrorReasonInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == OCIRepositoryErrorReason_OCI_REPOSITORY_ERROR_REASON_INVALID.String() && e.Code == 403
}

// The repository does not seem to be operational
// a previous validation has failed
func ErrorOciRepositoryErrorReasonInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(403, OCIRepositoryErrorReason_OCI_REPOSITORY_ERROR_REASON_INVALID.String(), fmt.Sprintf(format, args...))
}
