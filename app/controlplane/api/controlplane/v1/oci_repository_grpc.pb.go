// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: controlplane/v1/oci_repository.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OCIRepositoryServiceClient is the client API for OCIRepositoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OCIRepositoryServiceClient interface {
	// Save the OCI repository overriding the existing one (for now)
	Save(ctx context.Context, in *OCIRepositoryServiceSaveRequest, opts ...grpc.CallOption) (*OCIRepositoryServiceSaveResponse, error)
}

type oCIRepositoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOCIRepositoryServiceClient(cc grpc.ClientConnInterface) OCIRepositoryServiceClient {
	return &oCIRepositoryServiceClient{cc}
}

func (c *oCIRepositoryServiceClient) Save(ctx context.Context, in *OCIRepositoryServiceSaveRequest, opts ...grpc.CallOption) (*OCIRepositoryServiceSaveResponse, error) {
	out := new(OCIRepositoryServiceSaveResponse)
	err := c.cc.Invoke(ctx, "/controlplane.v1.OCIRepositoryService/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OCIRepositoryServiceServer is the server API for OCIRepositoryService service.
// All implementations must embed UnimplementedOCIRepositoryServiceServer
// for forward compatibility
type OCIRepositoryServiceServer interface {
	// Save the OCI repository overriding the existing one (for now)
	Save(context.Context, *OCIRepositoryServiceSaveRequest) (*OCIRepositoryServiceSaveResponse, error)
	mustEmbedUnimplementedOCIRepositoryServiceServer()
}

// UnimplementedOCIRepositoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOCIRepositoryServiceServer struct {
}

func (UnimplementedOCIRepositoryServiceServer) Save(context.Context, *OCIRepositoryServiceSaveRequest) (*OCIRepositoryServiceSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedOCIRepositoryServiceServer) mustEmbedUnimplementedOCIRepositoryServiceServer() {}

// UnsafeOCIRepositoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OCIRepositoryServiceServer will
// result in compilation errors.
type UnsafeOCIRepositoryServiceServer interface {
	mustEmbedUnimplementedOCIRepositoryServiceServer()
}

func RegisterOCIRepositoryServiceServer(s grpc.ServiceRegistrar, srv OCIRepositoryServiceServer) {
	s.RegisterService(&OCIRepositoryService_ServiceDesc, srv)
}

func _OCIRepositoryService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OCIRepositoryServiceSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCIRepositoryServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controlplane.v1.OCIRepositoryService/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCIRepositoryServiceServer).Save(ctx, req.(*OCIRepositoryServiceSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OCIRepositoryService_ServiceDesc is the grpc.ServiceDesc for OCIRepositoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OCIRepositoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "controlplane.v1.OCIRepositoryService",
	HandlerType: (*OCIRepositoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _OCIRepositoryService_Save_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controlplane/v1/oci_repository.proto",
}
