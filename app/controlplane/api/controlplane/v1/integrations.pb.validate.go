// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: controlplane/v1/integrations.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _integrations_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on AddDependencyTrackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDependencyTrackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDependencyTrackRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDependencyTrackRequestMultiError, or nil if none found.
func (m *AddDependencyTrackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDependencyTrackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetConfig() == nil {
		err := AddDependencyTrackRequestValidationError{
			field:  "Config",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddDependencyTrackRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddDependencyTrackRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddDependencyTrackRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetApiKey()) < 1 {
		err := AddDependencyTrackRequestValidationError{
			field:  "ApiKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddDependencyTrackRequestMultiError(errors)
	}

	return nil
}

// AddDependencyTrackRequestMultiError is an error wrapping multiple validation
// errors returned by AddDependencyTrackRequest.ValidateAll() if the
// designated constraints aren't met.
type AddDependencyTrackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDependencyTrackRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDependencyTrackRequestMultiError) AllErrors() []error { return m }

// AddDependencyTrackRequestValidationError is the validation error returned by
// AddDependencyTrackRequest.Validate if the designated constraints aren't met.
type AddDependencyTrackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDependencyTrackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDependencyTrackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDependencyTrackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDependencyTrackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDependencyTrackRequestValidationError) ErrorName() string {
	return "AddDependencyTrackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddDependencyTrackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDependencyTrackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDependencyTrackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDependencyTrackRequestValidationError{}

// Validate checks the field values on AddDependencyTrackResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDependencyTrackResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDependencyTrackResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDependencyTrackResponseMultiError, or nil if none found.
func (m *AddDependencyTrackResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDependencyTrackResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddDependencyTrackResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddDependencyTrackResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddDependencyTrackResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddDependencyTrackResponseMultiError(errors)
	}

	return nil
}

// AddDependencyTrackResponseMultiError is an error wrapping multiple
// validation errors returned by AddDependencyTrackResponse.ValidateAll() if
// the designated constraints aren't met.
type AddDependencyTrackResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDependencyTrackResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDependencyTrackResponseMultiError) AllErrors() []error { return m }

// AddDependencyTrackResponseValidationError is the validation error returned
// by AddDependencyTrackResponse.Validate if the designated constraints aren't met.
type AddDependencyTrackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDependencyTrackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDependencyTrackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDependencyTrackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDependencyTrackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDependencyTrackResponseValidationError) ErrorName() string {
	return "AddDependencyTrackResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddDependencyTrackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDependencyTrackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDependencyTrackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDependencyTrackResponseValidationError{}

// Validate checks the field values on IntegrationsServiceListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IntegrationsServiceListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrationsServiceListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IntegrationsServiceListRequestMultiError, or nil if none found.
func (m *IntegrationsServiceListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationsServiceListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IntegrationsServiceListRequestMultiError(errors)
	}

	return nil
}

// IntegrationsServiceListRequestMultiError is an error wrapping multiple
// validation errors returned by IntegrationsServiceListRequest.ValidateAll()
// if the designated constraints aren't met.
type IntegrationsServiceListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationsServiceListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationsServiceListRequestMultiError) AllErrors() []error { return m }

// IntegrationsServiceListRequestValidationError is the validation error
// returned by IntegrationsServiceListRequest.Validate if the designated
// constraints aren't met.
type IntegrationsServiceListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationsServiceListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationsServiceListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationsServiceListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationsServiceListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationsServiceListRequestValidationError) ErrorName() string {
	return "IntegrationsServiceListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationsServiceListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationsServiceListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationsServiceListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationsServiceListRequestValidationError{}

// Validate checks the field values on IntegrationsServiceListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IntegrationsServiceListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrationsServiceListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IntegrationsServiceListResponseMultiError, or nil if none found.
func (m *IntegrationsServiceListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationsServiceListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntegrationsServiceListResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntegrationsServiceListResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntegrationsServiceListResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IntegrationsServiceListResponseMultiError(errors)
	}

	return nil
}

// IntegrationsServiceListResponseMultiError is an error wrapping multiple
// validation errors returned by IntegrationsServiceListResponse.ValidateAll()
// if the designated constraints aren't met.
type IntegrationsServiceListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationsServiceListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationsServiceListResponseMultiError) AllErrors() []error { return m }

// IntegrationsServiceListResponseValidationError is the validation error
// returned by IntegrationsServiceListResponse.Validate if the designated
// constraints aren't met.
type IntegrationsServiceListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationsServiceListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationsServiceListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationsServiceListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationsServiceListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationsServiceListResponseValidationError) ErrorName() string {
	return "IntegrationsServiceListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationsServiceListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationsServiceListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationsServiceListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationsServiceListResponseValidationError{}

// Validate checks the field values on IntegrationsServiceAttachRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IntegrationsServiceAttachRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrationsServiceAttachRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IntegrationsServiceAttachRequestMultiError, or nil if none found.
func (m *IntegrationsServiceAttachRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationsServiceAttachRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetWorkflowId()); err != nil {
		err = IntegrationsServiceAttachRequestValidationError{
			field:  "WorkflowId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetIntegrationId()); err != nil {
		err = IntegrationsServiceAttachRequestValidationError{
			field:  "IntegrationId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetConfig() == nil {
		err := IntegrationsServiceAttachRequestValidationError{
			field:  "Config",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IntegrationsServiceAttachRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IntegrationsServiceAttachRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IntegrationsServiceAttachRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IntegrationsServiceAttachRequestMultiError(errors)
	}

	return nil
}

func (m *IntegrationsServiceAttachRequest) _validateUuid(uuid string) error {
	if matched := _integrations_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// IntegrationsServiceAttachRequestMultiError is an error wrapping multiple
// validation errors returned by
// IntegrationsServiceAttachRequest.ValidateAll() if the designated
// constraints aren't met.
type IntegrationsServiceAttachRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationsServiceAttachRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationsServiceAttachRequestMultiError) AllErrors() []error { return m }

// IntegrationsServiceAttachRequestValidationError is the validation error
// returned by IntegrationsServiceAttachRequest.Validate if the designated
// constraints aren't met.
type IntegrationsServiceAttachRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationsServiceAttachRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationsServiceAttachRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationsServiceAttachRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationsServiceAttachRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationsServiceAttachRequestValidationError) ErrorName() string {
	return "IntegrationsServiceAttachRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationsServiceAttachRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationsServiceAttachRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationsServiceAttachRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationsServiceAttachRequestValidationError{}

// Validate checks the field values on IntegrationsServiceAttachResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IntegrationsServiceAttachResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrationsServiceAttachResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IntegrationsServiceAttachResponseMultiError, or nil if none found.
func (m *IntegrationsServiceAttachResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationsServiceAttachResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IntegrationsServiceAttachResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IntegrationsServiceAttachResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IntegrationsServiceAttachResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IntegrationsServiceAttachResponseMultiError(errors)
	}

	return nil
}

// IntegrationsServiceAttachResponseMultiError is an error wrapping multiple
// validation errors returned by
// IntegrationsServiceAttachResponse.ValidateAll() if the designated
// constraints aren't met.
type IntegrationsServiceAttachResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationsServiceAttachResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationsServiceAttachResponseMultiError) AllErrors() []error { return m }

// IntegrationsServiceAttachResponseValidationError is the validation error
// returned by IntegrationsServiceAttachResponse.Validate if the designated
// constraints aren't met.
type IntegrationsServiceAttachResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationsServiceAttachResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationsServiceAttachResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationsServiceAttachResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationsServiceAttachResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationsServiceAttachResponseValidationError) ErrorName() string {
	return "IntegrationsServiceAttachResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationsServiceAttachResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationsServiceAttachResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationsServiceAttachResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationsServiceAttachResponseValidationError{}

// Validate checks the field values on IntegrationsServiceDetachRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IntegrationsServiceDetachRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrationsServiceDetachRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IntegrationsServiceDetachRequestMultiError, or nil if none found.
func (m *IntegrationsServiceDetachRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationsServiceDetachRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = IntegrationsServiceDetachRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IntegrationsServiceDetachRequestMultiError(errors)
	}

	return nil
}

func (m *IntegrationsServiceDetachRequest) _validateUuid(uuid string) error {
	if matched := _integrations_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// IntegrationsServiceDetachRequestMultiError is an error wrapping multiple
// validation errors returned by
// IntegrationsServiceDetachRequest.ValidateAll() if the designated
// constraints aren't met.
type IntegrationsServiceDetachRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationsServiceDetachRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationsServiceDetachRequestMultiError) AllErrors() []error { return m }

// IntegrationsServiceDetachRequestValidationError is the validation error
// returned by IntegrationsServiceDetachRequest.Validate if the designated
// constraints aren't met.
type IntegrationsServiceDetachRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationsServiceDetachRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationsServiceDetachRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationsServiceDetachRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationsServiceDetachRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationsServiceDetachRequestValidationError) ErrorName() string {
	return "IntegrationsServiceDetachRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationsServiceDetachRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationsServiceDetachRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationsServiceDetachRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationsServiceDetachRequestValidationError{}

// Validate checks the field values on IntegrationsServiceDetachResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IntegrationsServiceDetachResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrationsServiceDetachResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IntegrationsServiceDetachResponseMultiError, or nil if none found.
func (m *IntegrationsServiceDetachResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationsServiceDetachResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IntegrationsServiceDetachResponseMultiError(errors)
	}

	return nil
}

// IntegrationsServiceDetachResponseMultiError is an error wrapping multiple
// validation errors returned by
// IntegrationsServiceDetachResponse.ValidateAll() if the designated
// constraints aren't met.
type IntegrationsServiceDetachResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationsServiceDetachResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationsServiceDetachResponseMultiError) AllErrors() []error { return m }

// IntegrationsServiceDetachResponseValidationError is the validation error
// returned by IntegrationsServiceDetachResponse.Validate if the designated
// constraints aren't met.
type IntegrationsServiceDetachResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationsServiceDetachResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationsServiceDetachResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationsServiceDetachResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationsServiceDetachResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationsServiceDetachResponseValidationError) ErrorName() string {
	return "IntegrationsServiceDetachResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationsServiceDetachResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationsServiceDetachResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationsServiceDetachResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationsServiceDetachResponseValidationError{}

// Validate checks the field values on ListAttachmentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAttachmentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAttachmentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAttachmentsRequestMultiError, or nil if none found.
func (m *ListAttachmentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAttachmentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkflowId

	if len(errors) > 0 {
		return ListAttachmentsRequestMultiError(errors)
	}

	return nil
}

// ListAttachmentsRequestMultiError is an error wrapping multiple validation
// errors returned by ListAttachmentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAttachmentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAttachmentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAttachmentsRequestMultiError) AllErrors() []error { return m }

// ListAttachmentsRequestValidationError is the validation error returned by
// ListAttachmentsRequest.Validate if the designated constraints aren't met.
type ListAttachmentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAttachmentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAttachmentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAttachmentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAttachmentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAttachmentsRequestValidationError) ErrorName() string {
	return "ListAttachmentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAttachmentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAttachmentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAttachmentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAttachmentsRequestValidationError{}

// Validate checks the field values on ListAttachmentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAttachmentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAttachmentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAttachmentsResponseMultiError, or nil if none found.
func (m *ListAttachmentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAttachmentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAttachmentsResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAttachmentsResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAttachmentsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAttachmentsResponseMultiError(errors)
	}

	return nil
}

// ListAttachmentsResponseMultiError is an error wrapping multiple validation
// errors returned by ListAttachmentsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAttachmentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAttachmentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAttachmentsResponseMultiError) AllErrors() []error { return m }

// ListAttachmentsResponseValidationError is the validation error returned by
// ListAttachmentsResponse.Validate if the designated constraints aren't met.
type ListAttachmentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAttachmentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAttachmentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAttachmentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAttachmentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAttachmentsResponseValidationError) ErrorName() string {
	return "ListAttachmentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAttachmentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAttachmentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAttachmentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAttachmentsResponseValidationError{}

// Validate checks the field values on IntegrationItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IntegrationItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrationItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IntegrationItemMultiError, or nil if none found.
func (m *IntegrationItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Kind

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IntegrationItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IntegrationItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IntegrationItemValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IntegrationItemValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IntegrationItemValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IntegrationItemValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IntegrationItemMultiError(errors)
	}

	return nil
}

// IntegrationItemMultiError is an error wrapping multiple validation errors
// returned by IntegrationItem.ValidateAll() if the designated constraints
// aren't met.
type IntegrationItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationItemMultiError) AllErrors() []error { return m }

// IntegrationItemValidationError is the validation error returned by
// IntegrationItem.Validate if the designated constraints aren't met.
type IntegrationItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationItemValidationError) ErrorName() string { return "IntegrationItemValidationError" }

// Error satisfies the builtin error interface
func (e IntegrationItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationItemValidationError{}

// Validate checks the field values on IntegrationAttachmentItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IntegrationAttachmentItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrationAttachmentItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IntegrationAttachmentItemMultiError, or nil if none found.
func (m *IntegrationAttachmentItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationAttachmentItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IntegrationAttachmentItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IntegrationAttachmentItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IntegrationAttachmentItemValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IntegrationAttachmentItemValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IntegrationAttachmentItemValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IntegrationAttachmentItemValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIntegration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IntegrationAttachmentItemValidationError{
					field:  "Integration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IntegrationAttachmentItemValidationError{
					field:  "Integration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIntegration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IntegrationAttachmentItemValidationError{
				field:  "Integration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflow()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IntegrationAttachmentItemValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IntegrationAttachmentItemValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IntegrationAttachmentItemValidationError{
				field:  "Workflow",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IntegrationAttachmentItemMultiError(errors)
	}

	return nil
}

// IntegrationAttachmentItemMultiError is an error wrapping multiple validation
// errors returned by IntegrationAttachmentItem.ValidateAll() if the
// designated constraints aren't met.
type IntegrationAttachmentItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationAttachmentItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationAttachmentItemMultiError) AllErrors() []error { return m }

// IntegrationAttachmentItemValidationError is the validation error returned by
// IntegrationAttachmentItem.Validate if the designated constraints aren't met.
type IntegrationAttachmentItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationAttachmentItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationAttachmentItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationAttachmentItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationAttachmentItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationAttachmentItemValidationError) ErrorName() string {
	return "IntegrationAttachmentItemValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationAttachmentItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationAttachmentItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationAttachmentItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationAttachmentItemValidationError{}

// Validate checks the field values on IntegrationConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IntegrationConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrationConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IntegrationConfigMultiError, or nil if none found.
func (m *IntegrationConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Config.(type) {
	case *IntegrationConfig_DependencyTrack_:
		if v == nil {
			err := IntegrationConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDependencyTrack()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntegrationConfigValidationError{
						field:  "DependencyTrack",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntegrationConfigValidationError{
						field:  "DependencyTrack",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDependencyTrack()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntegrationConfigValidationError{
					field:  "DependencyTrack",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return IntegrationConfigMultiError(errors)
	}

	return nil
}

// IntegrationConfigMultiError is an error wrapping multiple validation errors
// returned by IntegrationConfig.ValidateAll() if the designated constraints
// aren't met.
type IntegrationConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationConfigMultiError) AllErrors() []error { return m }

// IntegrationConfigValidationError is the validation error returned by
// IntegrationConfig.Validate if the designated constraints aren't met.
type IntegrationConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationConfigValidationError) ErrorName() string {
	return "IntegrationConfigValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationConfigValidationError{}

// Validate checks the field values on IntegrationAttachmentConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IntegrationAttachmentConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrationAttachmentConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IntegrationAttachmentConfigMultiError, or nil if none found.
func (m *IntegrationAttachmentConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationAttachmentConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Config.(type) {
	case *IntegrationAttachmentConfig_DependencyTrack_:
		if v == nil {
			err := IntegrationAttachmentConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDependencyTrack()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntegrationAttachmentConfigValidationError{
						field:  "DependencyTrack",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntegrationAttachmentConfigValidationError{
						field:  "DependencyTrack",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDependencyTrack()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntegrationAttachmentConfigValidationError{
					field:  "DependencyTrack",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return IntegrationAttachmentConfigMultiError(errors)
	}

	return nil
}

// IntegrationAttachmentConfigMultiError is an error wrapping multiple
// validation errors returned by IntegrationAttachmentConfig.ValidateAll() if
// the designated constraints aren't met.
type IntegrationAttachmentConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationAttachmentConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationAttachmentConfigMultiError) AllErrors() []error { return m }

// IntegrationAttachmentConfigValidationError is the validation error returned
// by IntegrationAttachmentConfig.Validate if the designated constraints
// aren't met.
type IntegrationAttachmentConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationAttachmentConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationAttachmentConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationAttachmentConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationAttachmentConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationAttachmentConfigValidationError) ErrorName() string {
	return "IntegrationAttachmentConfigValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationAttachmentConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationAttachmentConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationAttachmentConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationAttachmentConfigValidationError{}

// Validate checks the field values on IntegrationsServiceDeleteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IntegrationsServiceDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrationsServiceDeleteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IntegrationsServiceDeleteRequestMultiError, or nil if none found.
func (m *IntegrationsServiceDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationsServiceDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = IntegrationsServiceDeleteRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IntegrationsServiceDeleteRequestMultiError(errors)
	}

	return nil
}

func (m *IntegrationsServiceDeleteRequest) _validateUuid(uuid string) error {
	if matched := _integrations_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// IntegrationsServiceDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by
// IntegrationsServiceDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type IntegrationsServiceDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationsServiceDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationsServiceDeleteRequestMultiError) AllErrors() []error { return m }

// IntegrationsServiceDeleteRequestValidationError is the validation error
// returned by IntegrationsServiceDeleteRequest.Validate if the designated
// constraints aren't met.
type IntegrationsServiceDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationsServiceDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationsServiceDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationsServiceDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationsServiceDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationsServiceDeleteRequestValidationError) ErrorName() string {
	return "IntegrationsServiceDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationsServiceDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationsServiceDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationsServiceDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationsServiceDeleteRequestValidationError{}

// Validate checks the field values on IntegrationsServiceDeleteResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IntegrationsServiceDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrationsServiceDeleteResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IntegrationsServiceDeleteResponseMultiError, or nil if none found.
func (m *IntegrationsServiceDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationsServiceDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IntegrationsServiceDeleteResponseMultiError(errors)
	}

	return nil
}

// IntegrationsServiceDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by
// IntegrationsServiceDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type IntegrationsServiceDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationsServiceDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationsServiceDeleteResponseMultiError) AllErrors() []error { return m }

// IntegrationsServiceDeleteResponseValidationError is the validation error
// returned by IntegrationsServiceDeleteResponse.Validate if the designated
// constraints aren't met.
type IntegrationsServiceDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationsServiceDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationsServiceDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationsServiceDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationsServiceDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationsServiceDeleteResponseValidationError) ErrorName() string {
	return "IntegrationsServiceDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationsServiceDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationsServiceDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationsServiceDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationsServiceDeleteResponseValidationError{}

// Validate checks the field values on IntegrationConfig_DependencyTrack with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IntegrationConfig_DependencyTrack) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrationConfig_DependencyTrack
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IntegrationConfig_DependencyTrackMultiError, or nil if none found.
func (m *IntegrationConfig_DependencyTrack) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationConfig_DependencyTrack) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDomain()) < 1 {
		err := IntegrationConfig_DependencyTrackValidationError{
			field:  "Domain",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AllowAutoCreate

	if len(errors) > 0 {
		return IntegrationConfig_DependencyTrackMultiError(errors)
	}

	return nil
}

// IntegrationConfig_DependencyTrackMultiError is an error wrapping multiple
// validation errors returned by
// IntegrationConfig_DependencyTrack.ValidateAll() if the designated
// constraints aren't met.
type IntegrationConfig_DependencyTrackMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationConfig_DependencyTrackMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationConfig_DependencyTrackMultiError) AllErrors() []error { return m }

// IntegrationConfig_DependencyTrackValidationError is the validation error
// returned by IntegrationConfig_DependencyTrack.Validate if the designated
// constraints aren't met.
type IntegrationConfig_DependencyTrackValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationConfig_DependencyTrackValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationConfig_DependencyTrackValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationConfig_DependencyTrackValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationConfig_DependencyTrackValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationConfig_DependencyTrackValidationError) ErrorName() string {
	return "IntegrationConfig_DependencyTrackValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationConfig_DependencyTrackValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationConfig_DependencyTrack.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationConfig_DependencyTrackValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationConfig_DependencyTrackValidationError{}

// Validate checks the field values on
// IntegrationAttachmentConfig_DependencyTrack with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IntegrationAttachmentConfig_DependencyTrack) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IntegrationAttachmentConfig_DependencyTrack with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IntegrationAttachmentConfig_DependencyTrackMultiError, or nil if none found.
func (m *IntegrationAttachmentConfig_DependencyTrack) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationAttachmentConfig_DependencyTrack) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofProjectPresent := false
	switch v := m.Project.(type) {
	case *IntegrationAttachmentConfig_DependencyTrack_ProjectId:
		if v == nil {
			err := IntegrationAttachmentConfig_DependencyTrackValidationError{
				field:  "Project",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofProjectPresent = true
		// no validation rules for ProjectId
	case *IntegrationAttachmentConfig_DependencyTrack_ProjectName:
		if v == nil {
			err := IntegrationAttachmentConfig_DependencyTrackValidationError{
				field:  "Project",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofProjectPresent = true
		// no validation rules for ProjectName
	default:
		_ = v // ensures v is used
	}
	if !oneofProjectPresent {
		err := IntegrationAttachmentConfig_DependencyTrackValidationError{
			field:  "Project",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IntegrationAttachmentConfig_DependencyTrackMultiError(errors)
	}

	return nil
}

// IntegrationAttachmentConfig_DependencyTrackMultiError is an error wrapping
// multiple validation errors returned by
// IntegrationAttachmentConfig_DependencyTrack.ValidateAll() if the designated
// constraints aren't met.
type IntegrationAttachmentConfig_DependencyTrackMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationAttachmentConfig_DependencyTrackMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationAttachmentConfig_DependencyTrackMultiError) AllErrors() []error { return m }

// IntegrationAttachmentConfig_DependencyTrackValidationError is the validation
// error returned by IntegrationAttachmentConfig_DependencyTrack.Validate if
// the designated constraints aren't met.
type IntegrationAttachmentConfig_DependencyTrackValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationAttachmentConfig_DependencyTrackValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationAttachmentConfig_DependencyTrackValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationAttachmentConfig_DependencyTrackValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationAttachmentConfig_DependencyTrackValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationAttachmentConfig_DependencyTrackValidationError) ErrorName() string {
	return "IntegrationAttachmentConfig_DependencyTrackValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationAttachmentConfig_DependencyTrackValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationAttachmentConfig_DependencyTrack.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationAttachmentConfig_DependencyTrackValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationAttachmentConfig_DependencyTrackValidationError{}
