// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: controlplane/v1/robot_accounts.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _robot_accounts_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on RobotAccountServiceCreateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RobotAccountServiceCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RobotAccountServiceCreateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RobotAccountServiceCreateRequestMultiError, or nil if none found.
func (m *RobotAccountServiceCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RobotAccountServiceCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if err := m._validateUuid(m.GetWorkflowId()); err != nil {
		err = RobotAccountServiceCreateRequestValidationError{
			field:  "WorkflowId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RobotAccountServiceCreateRequestMultiError(errors)
	}

	return nil
}

func (m *RobotAccountServiceCreateRequest) _validateUuid(uuid string) error {
	if matched := _robot_accounts_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RobotAccountServiceCreateRequestMultiError is an error wrapping multiple
// validation errors returned by
// RobotAccountServiceCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type RobotAccountServiceCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RobotAccountServiceCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RobotAccountServiceCreateRequestMultiError) AllErrors() []error { return m }

// RobotAccountServiceCreateRequestValidationError is the validation error
// returned by RobotAccountServiceCreateRequest.Validate if the designated
// constraints aren't met.
type RobotAccountServiceCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RobotAccountServiceCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RobotAccountServiceCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RobotAccountServiceCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RobotAccountServiceCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RobotAccountServiceCreateRequestValidationError) ErrorName() string {
	return "RobotAccountServiceCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RobotAccountServiceCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRobotAccountServiceCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RobotAccountServiceCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RobotAccountServiceCreateRequestValidationError{}

// Validate checks the field values on RobotAccountServiceCreateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RobotAccountServiceCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RobotAccountServiceCreateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RobotAccountServiceCreateResponseMultiError, or nil if none found.
func (m *RobotAccountServiceCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RobotAccountServiceCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RobotAccountServiceCreateResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RobotAccountServiceCreateResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RobotAccountServiceCreateResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RobotAccountServiceCreateResponseMultiError(errors)
	}

	return nil
}

// RobotAccountServiceCreateResponseMultiError is an error wrapping multiple
// validation errors returned by
// RobotAccountServiceCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type RobotAccountServiceCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RobotAccountServiceCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RobotAccountServiceCreateResponseMultiError) AllErrors() []error { return m }

// RobotAccountServiceCreateResponseValidationError is the validation error
// returned by RobotAccountServiceCreateResponse.Validate if the designated
// constraints aren't met.
type RobotAccountServiceCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RobotAccountServiceCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RobotAccountServiceCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RobotAccountServiceCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RobotAccountServiceCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RobotAccountServiceCreateResponseValidationError) ErrorName() string {
	return "RobotAccountServiceCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RobotAccountServiceCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRobotAccountServiceCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RobotAccountServiceCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RobotAccountServiceCreateResponseValidationError{}

// Validate checks the field values on RobotAccountServiceRevokeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RobotAccountServiceRevokeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RobotAccountServiceRevokeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RobotAccountServiceRevokeRequestMultiError, or nil if none found.
func (m *RobotAccountServiceRevokeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RobotAccountServiceRevokeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = RobotAccountServiceRevokeRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RobotAccountServiceRevokeRequestMultiError(errors)
	}

	return nil
}

func (m *RobotAccountServiceRevokeRequest) _validateUuid(uuid string) error {
	if matched := _robot_accounts_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RobotAccountServiceRevokeRequestMultiError is an error wrapping multiple
// validation errors returned by
// RobotAccountServiceRevokeRequest.ValidateAll() if the designated
// constraints aren't met.
type RobotAccountServiceRevokeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RobotAccountServiceRevokeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RobotAccountServiceRevokeRequestMultiError) AllErrors() []error { return m }

// RobotAccountServiceRevokeRequestValidationError is the validation error
// returned by RobotAccountServiceRevokeRequest.Validate if the designated
// constraints aren't met.
type RobotAccountServiceRevokeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RobotAccountServiceRevokeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RobotAccountServiceRevokeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RobotAccountServiceRevokeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RobotAccountServiceRevokeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RobotAccountServiceRevokeRequestValidationError) ErrorName() string {
	return "RobotAccountServiceRevokeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RobotAccountServiceRevokeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRobotAccountServiceRevokeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RobotAccountServiceRevokeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RobotAccountServiceRevokeRequestValidationError{}

// Validate checks the field values on RobotAccountServiceRevokeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RobotAccountServiceRevokeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RobotAccountServiceRevokeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RobotAccountServiceRevokeResponseMultiError, or nil if none found.
func (m *RobotAccountServiceRevokeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RobotAccountServiceRevokeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RobotAccountServiceRevokeResponseMultiError(errors)
	}

	return nil
}

// RobotAccountServiceRevokeResponseMultiError is an error wrapping multiple
// validation errors returned by
// RobotAccountServiceRevokeResponse.ValidateAll() if the designated
// constraints aren't met.
type RobotAccountServiceRevokeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RobotAccountServiceRevokeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RobotAccountServiceRevokeResponseMultiError) AllErrors() []error { return m }

// RobotAccountServiceRevokeResponseValidationError is the validation error
// returned by RobotAccountServiceRevokeResponse.Validate if the designated
// constraints aren't met.
type RobotAccountServiceRevokeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RobotAccountServiceRevokeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RobotAccountServiceRevokeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RobotAccountServiceRevokeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RobotAccountServiceRevokeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RobotAccountServiceRevokeResponseValidationError) ErrorName() string {
	return "RobotAccountServiceRevokeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RobotAccountServiceRevokeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRobotAccountServiceRevokeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RobotAccountServiceRevokeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RobotAccountServiceRevokeResponseValidationError{}

// Validate checks the field values on RobotAccountServiceListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RobotAccountServiceListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RobotAccountServiceListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RobotAccountServiceListRequestMultiError, or nil if none found.
func (m *RobotAccountServiceListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RobotAccountServiceListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetWorkflowId()); err != nil {
		err = RobotAccountServiceListRequestValidationError{
			field:  "WorkflowId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IncludeRevoked

	if len(errors) > 0 {
		return RobotAccountServiceListRequestMultiError(errors)
	}

	return nil
}

func (m *RobotAccountServiceListRequest) _validateUuid(uuid string) error {
	if matched := _robot_accounts_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RobotAccountServiceListRequestMultiError is an error wrapping multiple
// validation errors returned by RobotAccountServiceListRequest.ValidateAll()
// if the designated constraints aren't met.
type RobotAccountServiceListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RobotAccountServiceListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RobotAccountServiceListRequestMultiError) AllErrors() []error { return m }

// RobotAccountServiceListRequestValidationError is the validation error
// returned by RobotAccountServiceListRequest.Validate if the designated
// constraints aren't met.
type RobotAccountServiceListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RobotAccountServiceListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RobotAccountServiceListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RobotAccountServiceListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RobotAccountServiceListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RobotAccountServiceListRequestValidationError) ErrorName() string {
	return "RobotAccountServiceListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RobotAccountServiceListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRobotAccountServiceListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RobotAccountServiceListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RobotAccountServiceListRequestValidationError{}

// Validate checks the field values on RobotAccountServiceListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RobotAccountServiceListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RobotAccountServiceListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RobotAccountServiceListResponseMultiError, or nil if none found.
func (m *RobotAccountServiceListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RobotAccountServiceListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RobotAccountServiceListResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RobotAccountServiceListResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RobotAccountServiceListResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RobotAccountServiceListResponseMultiError(errors)
	}

	return nil
}

// RobotAccountServiceListResponseMultiError is an error wrapping multiple
// validation errors returned by RobotAccountServiceListResponse.ValidateAll()
// if the designated constraints aren't met.
type RobotAccountServiceListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RobotAccountServiceListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RobotAccountServiceListResponseMultiError) AllErrors() []error { return m }

// RobotAccountServiceListResponseValidationError is the validation error
// returned by RobotAccountServiceListResponse.Validate if the designated
// constraints aren't met.
type RobotAccountServiceListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RobotAccountServiceListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RobotAccountServiceListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RobotAccountServiceListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RobotAccountServiceListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RobotAccountServiceListResponseValidationError) ErrorName() string {
	return "RobotAccountServiceListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RobotAccountServiceListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRobotAccountServiceListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RobotAccountServiceListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RobotAccountServiceListResponseValidationError{}

// Validate checks the field values on
// RobotAccountServiceCreateResponse_RobotAccountFull with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RobotAccountServiceCreateResponse_RobotAccountFull) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RobotAccountServiceCreateResponse_RobotAccountFull with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// RobotAccountServiceCreateResponse_RobotAccountFullMultiError, or nil if
// none found.
func (m *RobotAccountServiceCreateResponse_RobotAccountFull) ValidateAll() error {
	return m.validate(true)
}

func (m *RobotAccountServiceCreateResponse_RobotAccountFull) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for WorkflowId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RobotAccountServiceCreateResponse_RobotAccountFullValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RobotAccountServiceCreateResponse_RobotAccountFullValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RobotAccountServiceCreateResponse_RobotAccountFullValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRevokedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RobotAccountServiceCreateResponse_RobotAccountFullValidationError{
					field:  "RevokedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RobotAccountServiceCreateResponse_RobotAccountFullValidationError{
					field:  "RevokedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRevokedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RobotAccountServiceCreateResponse_RobotAccountFullValidationError{
				field:  "RevokedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Key

	if len(errors) > 0 {
		return RobotAccountServiceCreateResponse_RobotAccountFullMultiError(errors)
	}

	return nil
}

// RobotAccountServiceCreateResponse_RobotAccountFullMultiError is an error
// wrapping multiple validation errors returned by
// RobotAccountServiceCreateResponse_RobotAccountFull.ValidateAll() if the
// designated constraints aren't met.
type RobotAccountServiceCreateResponse_RobotAccountFullMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RobotAccountServiceCreateResponse_RobotAccountFullMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RobotAccountServiceCreateResponse_RobotAccountFullMultiError) AllErrors() []error { return m }

// RobotAccountServiceCreateResponse_RobotAccountFullValidationError is the
// validation error returned by
// RobotAccountServiceCreateResponse_RobotAccountFull.Validate if the
// designated constraints aren't met.
type RobotAccountServiceCreateResponse_RobotAccountFullValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RobotAccountServiceCreateResponse_RobotAccountFullValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RobotAccountServiceCreateResponse_RobotAccountFullValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RobotAccountServiceCreateResponse_RobotAccountFullValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RobotAccountServiceCreateResponse_RobotAccountFullValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RobotAccountServiceCreateResponse_RobotAccountFullValidationError) ErrorName() string {
	return "RobotAccountServiceCreateResponse_RobotAccountFullValidationError"
}

// Error satisfies the builtin error interface
func (e RobotAccountServiceCreateResponse_RobotAccountFullValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRobotAccountServiceCreateResponse_RobotAccountFull.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RobotAccountServiceCreateResponse_RobotAccountFullValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RobotAccountServiceCreateResponse_RobotAccountFullValidationError{}

// Validate checks the field values on
// RobotAccountServiceListResponse_RobotAccountItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RobotAccountServiceListResponse_RobotAccountItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RobotAccountServiceListResponse_RobotAccountItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// RobotAccountServiceListResponse_RobotAccountItemMultiError, or nil if none found.
func (m *RobotAccountServiceListResponse_RobotAccountItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RobotAccountServiceListResponse_RobotAccountItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for WorkflowId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RobotAccountServiceListResponse_RobotAccountItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RobotAccountServiceListResponse_RobotAccountItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RobotAccountServiceListResponse_RobotAccountItemValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRevokedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RobotAccountServiceListResponse_RobotAccountItemValidationError{
					field:  "RevokedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RobotAccountServiceListResponse_RobotAccountItemValidationError{
					field:  "RevokedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRevokedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RobotAccountServiceListResponse_RobotAccountItemValidationError{
				field:  "RevokedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RobotAccountServiceListResponse_RobotAccountItemMultiError(errors)
	}

	return nil
}

// RobotAccountServiceListResponse_RobotAccountItemMultiError is an error
// wrapping multiple validation errors returned by
// RobotAccountServiceListResponse_RobotAccountItem.ValidateAll() if the
// designated constraints aren't met.
type RobotAccountServiceListResponse_RobotAccountItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RobotAccountServiceListResponse_RobotAccountItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RobotAccountServiceListResponse_RobotAccountItemMultiError) AllErrors() []error { return m }

// RobotAccountServiceListResponse_RobotAccountItemValidationError is the
// validation error returned by
// RobotAccountServiceListResponse_RobotAccountItem.Validate if the designated
// constraints aren't met.
type RobotAccountServiceListResponse_RobotAccountItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RobotAccountServiceListResponse_RobotAccountItemValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RobotAccountServiceListResponse_RobotAccountItemValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RobotAccountServiceListResponse_RobotAccountItemValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RobotAccountServiceListResponse_RobotAccountItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RobotAccountServiceListResponse_RobotAccountItemValidationError) ErrorName() string {
	return "RobotAccountServiceListResponse_RobotAccountItemValidationError"
}

// Error satisfies the builtin error interface
func (e RobotAccountServiceListResponse_RobotAccountItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRobotAccountServiceListResponse_RobotAccountItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RobotAccountServiceListResponse_RobotAccountItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RobotAccountServiceListResponse_RobotAccountItemValidationError{}
