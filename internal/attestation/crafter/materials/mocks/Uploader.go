// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	materials "github.com/chainloop-dev/chainloop/internal/attestation/crafter/materials"
	mock "github.com/stretchr/testify/mock"
)

// Uploader is an autogenerated mock type for the Uploader type
type Uploader struct {
	mock.Mock
}

// GetUploadStatus provides a mock function with given fields:
func (_m *Uploader) GetUploadStatus() chan *materials.UpDownStatus {
	ret := _m.Called()

	var r0 chan *materials.UpDownStatus
	if rf, ok := ret.Get(0).(func() chan *materials.UpDownStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *materials.UpDownStatus)
		}
	}

	return r0
}

// Upload provides a mock function with given fields: ctx, filePath
func (_m *Uploader) Upload(ctx context.Context, filePath string) (*materials.UpDownStatus, error) {
	ret := _m.Called(ctx, filePath)

	var r0 *materials.UpDownStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*materials.UpDownStatus, error)); ok {
		return rf(ctx, filePath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *materials.UpDownStatus); ok {
		r0 = rf(ctx, filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*materials.UpDownStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUploader interface {
	mock.TestingT
	Cleanup(func())
}

// NewUploader creates a new instance of Uploader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUploader(t mockConstructorTestingTNewUploader) *Uploader {
	mock := &Uploader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
