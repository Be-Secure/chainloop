name: Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  test:
    uses: chainloop-dev/bedrock-old/.github/workflows/test.yml@main
    # secrets required to run the attestation on the testing job, otherwise the chainloop token is not available
    secrets: inherit

  release:
    name: Release CLI and control-plane/artifact-cas container images
    needs: test
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag' # Guard to make sure we are releasing once
    permissions:
      id-token: write # required to use OIDC and retrieve Google Cloud Credentials
      contents: write # required for goreleaser
    env:
      CHAINLOOP_VERSION: 0.8.89
      CHAINLOOP_ROBOT_ACCOUNT: ${{ secrets.CHAINLOOP_WF_RELEASE }}
      CONTAINER_IMAGE_CP: us-east1-docker.pkg.dev/bedrock-371810/chainloop/control-plane:${{ github.ref_name }}
      CONTAINER_IMAGE_CAS: us-east1-docker.pkg.dev/bedrock-371810/chainloop/artifact-cas:${{ github.ref_name }}
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v2.5.0

      - name: Install ChainLoop
        run: |
          curl -sfL https://chainloop.dev/install.sh | bash -s -- --version v${{ env.CHAINLOOP_VERSION }}

      - name: Download jq
        run: |
          sudo wget -q https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /usr/local/bin/jq
          sudo chmod u+x /usr/local/bin/jq

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Initialize Attestation
        run: |
          chainloop attestation init
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.20"

      - name: "Configure Google Cloud credentials"
        id: "auth-google"
        uses: "google-github-actions/auth@v0"
        with:
          token_format: "access_token"
          workload_identity_provider: projects/1044976554810/locations/global/workloadIdentityPools/chainloop-github-pool/providers/github-provider
          service_account: chainloop-release-github@bedrock-371810.iam.gserviceaccount.com

      - name: Login to GAR
        uses: docker/login-action@v2
        with:
          registry: us-east1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth-google.outputs.access_token }}

      - name: Run GoReleaser
        id: release
        uses: goreleaser/goreleaser-action@v3
        with:
          distribution: goreleaser
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}

      - uses: anchore/sbom-action@v0
        with:
          image: ${{ env.CONTAINER_IMAGE_CP }}
          format: cyclonedx-json
          artifact-name: controlplane.cyclonedx.json
          output-file: /tmp/sbom.cp.cyclonedx.json

      - uses: anchore/sbom-action@v0
        with:
          image: ${{ env.CONTAINER_IMAGE_CAS }}
          format: cyclonedx-json
          artifact-name: cas.cyclonedx.json
          output-file: /tmp/sbom.cas.cyclonedx.json

      - name: Add Attestation Artifacts (SBOM)
        run: |
          chainloop attestation add --name sbom-control-plane --value /tmp/sbom.cp.cyclonedx.json
          chainloop attestation add --name sbom-artifact-cas --value /tmp/sbom.cas.cyclonedx.json

      - name: Add Attestation Artifacts (container images)
        run: |
          # Control plane image
          chainloop attestation add --name control-plane-image --value ${{ env.CONTAINER_IMAGE_CP }}
          # CAS image
          chainloop attestation add --name artifact-cas-image --value ${{ env.CONTAINER_IMAGE_CAS }}

      - name: Add Attestation Artifacts (binaries)
        run: |
          # Binaries x86_64
          # TODO: add the rest of binaries
          echo -n '${{ steps.release.outputs.artifacts }}' | jq -r '.[] | select(.type=="Binary" and .goos=="linux" and .goarch=="amd64") | { "name": "\(.extra.ID)-\(.goos)-\(.goarch)", "path":"\(.path)"} | @base64' | while read i; do
              BINARY_NAME=$(echo "${i}" | base64 --decode | jq -r ${1} .name)
              BINARY_PATH=$(echo "${i}" | base64 --decode | jq -r ${1} .path)
              chainloop attestation add --name ${BINARY_NAME} --value ${BINARY_PATH} 
            done

      - name: Finish and Record Attestation
        if: ${{ success() }}
        run: |
          chainloop attestation status --full
          chainloop attestation push --key env://CHAINLOOP_SIGNING_KEY
        env:
          CHAINLOOP_SIGNING_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          CHAINLOOP_SIGNING_KEY: ${{ secrets.COSIGN_KEY }}

      - name: Mark attestation as failed
        if: ${{ failure() }}
        run: |
          chainloop attestation reset
      - name: Mark attestation as cancelled
        if: ${{ cancelled() }}
        run: |
          chainloop attestation reset --trigger cancellation

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: release
    strategy:
      fail-fast: false
      matrix:
        app:
          - controlplane
          - frontend
          - artifact-cas
    if: github.ref_type == 'tag' # Guard to make sure we are releasing once
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "Configure Google Cloud credentials"
        id: "auth-google"
        uses: "google-github-actions/auth@v0"
        with:
          token_format: "access_token"
          workload_identity_provider: projects/1044976554810/locations/global/workloadIdentityPools/chainloop-github-pool/providers/github-provider
          service_account: chainloop-release-github@bedrock-371810.iam.gserviceaccount.com

      - name: "Get Google Kubernetes Engine credentials"
        uses: "google-github-actions/get-gke-credentials@v1"
        with:
          cluster_name: "bedrock"
          location: "us-central1"

      - name: Check kubectl
        run: kubectl cluster-info

      - name: Check Helm version
        run: helm version

      - name: Bump Helm Chart
        if: ${{ matrix.app == 'controlplane' || matrix.app == 'artifact-cas' }}
        run: cd deployment && ./bump-chart-app-version.sh ${{ matrix.app }}/chart/Chart.yaml ${{ github.ref_name }}

      - name: Bump Helm Chart Frontend
        if: ${{ matrix.app == 'frontend' }}
        run: |
          # The frontend follows upstream frontend version instead
          LATEST_FRONTEND=$(gh api repos/chainloop-dev/frontend/tags -q ".[0].name")
          cd deployment && ./bump-chart-app-version.sh ${{ matrix.app }}/chart/Chart.yaml ${LATEST_FRONTEND}
        env:
          # PAT token with permissions to access the frontend private repository
          GITHUB_TOKEN: ${{ secrets.PAT_FRONTEND_TAGS_LIST }}

      - name: Deploy to production
        run: make -C deployment/${{ matrix.app }} upgrade-prod

      - name: Commit new Helm Chart
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Bump ${{ matrix.app }} Chart Version to ${{github.ref_name}}
          skip_checkout: false
          file_pattern: "*/*/chart/Chart.yaml"
          branch: main
          commit_author: Chainloop bot <bot@chainloop.dev>
          push_options: "--force"
