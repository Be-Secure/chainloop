version: '3'

# NOTE: This setup is meant to be used for development purposes only.
services:
  controlplane:
    extends:
      file: common.yml
      service: go-app
    ports:
      - 8000:8000 # HTTP
      - 9000:9000 # GRPC API
      - 5000:5000 # Metrics
    working_dir: /wd/app/controlplane
    command: "make run"
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      - CP_DB_HOST=postgresql
      - CP_VAULT_ADDRESS=http://vault:8200

  cas:
    extends:
      file: common.yml
      service: go-app
    ports:
      - 8001:8001 # HTTP
      - 9001:9001 # GRPC API
      - 5001:5001 # Metrics
    working_dir: /wd/app/artifact-cas
    command: "make run"
    environment:
      - CAS_VAULT_ADDRESS=http://vault:8200

  cli:
    extends:
      file: common.yml
      service: go-app
    working_dir: /wd/app/cli
    profiles:
      - donotstart
    volumes:
      - cli_config:/root/.config/chainloop/
    entrypoint: go run main.go --insecure --control-plane controlplane:9000 --cas-uri cas:9001

  postgresql:
    image: docker.io/bitnami/postgresql:14
    # Expose the port to the host to enable baremetal controlplane development
    ports:
      - 5432:5432
    volumes:
      - postgresql_data:/bitnami/postgresql
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - POSTGRESQL_DATABASE=controlplane
      - POSTGRESQL_USERNAME=postgres
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 2s
      retries: 10

  # in memory-only vault for development
  # note that secrets will get removed when the container is restarted
  vault:
    image: docker.io/vault:1.12.3
    cap_add:
      - IPC_LOCK
    ports:
      - 8200:8200
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=notasecret

# named volumes so they can be shared across go apps
volumes:
  go_cache:
  go_modules:
  cli_config:
  postgresql_data:
  vault_data: